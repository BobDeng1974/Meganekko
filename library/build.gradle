import org.gradle.internal.os.OperatingSystem

def ovrMobile = System.getenv('OVR_SDK_MOBILE')

apply plugin: 'com.android.library'

dependencies {
    /*
     * Oculus Mobile SDK integration
     */
    compile files("$ovrMobile/VrApi/Libs/Android/VrApi.jar")
    compile files("$ovrMobile/VrAppFramework/Libs/Android/VrAppFramework.jar")
    compile files("$ovrMobile/VrAppSupport/SystemUtils/Libs/Android/SystemUtils.jar")
    compile files("$ovrMobile/VrAppSupport/VrGUI/Libs/Android/VrGUI.jar")
    compile files("$ovrMobile/VrAppSupport/VrLocale/Libs/Android/VrLocale.jar")
    compile files("$ovrMobile/VrAppSupport/VrSound/Libs/Android/VrSound.jar")

    /*
     * Dependencies
     */
    compile 'com.android.support:support-v4:24.1.0'
    compile 'org.joml:joml:1.8.1'
}

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.1'

    buildTypes {
        debug {
            jniDebuggable true
        }
    }

    sourceSets {
        main {
            jniLibs.srcDir 'src/main/libs'
            jni.srcDirs = [] //disable automatic ndk-build call
            res.srcDirs = [
                    'src/main/res',
                    "$ovrMobile/VrAppFramework/res",
                    "$ovrMobile/VrAppSupport/VrGUI/res"
            ]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

/*
 * NDK integration
 */

def GetNDKBuildCmd() {

    def ndkDir = System.getenv('ANDROID_NDK_HOME')
    if (ndkDir == null) {
        ndkDir = System.getenv('ANDROID_NDK')
    }
    if (ndkDir == null) {
        ndkDir = System.getenv('NDKROOT')
    }
    if (ndkDir == null) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        ndkDir = properties.getProperty('ndk.dir')
    }
    if (ndkDir == null) {
        throw new GradleException('NDK not found! Check your environment for ANDROID_NDK or your local.properties contains ndk.dir')
    }
    if (OperatingSystem.current().isWindows()) {
        return ndkDir + '/ndk-build.cmd'
    } else {
        return ndkDir + '/ndk-build'
    }
}

project.afterEvaluate {
    compileDebugNdk.dependsOn 'NDKBuild'
    compileReleaseNdk.dependsOn 'NDKBuild'
    clean.dependsOn 'NDKBuildCleanMGN'
}

task NDKBuild(type: Exec) {
    commandLine GetNDKBuildCmd(), "NDK_PROJECT_PATH=$projectDir/src/main"
}

task NDKBuildCleanMGN(type: Exec) {
    commandLine GetNDKBuildCmd(), 'clean', "NDK_PROJECT_PATH=$projectDir/src/main"
}

/*
 * Generate distribution package
 */

apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            def deployPath = file("$rootDir/../Meganekko_pages/repository")
            repository(url: "file://${deployPath.absolutePath}")
            pom.version = '2.3.0'
            pom.groupId = 'com.eje_c'
            pom.artifactId = 'meganekko'
        }
    }
}
